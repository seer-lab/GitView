#!/bin/bash
###############################################################################
# Copyright (c) 2014 Jeremy S. Bradbury, Joseph Heron
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
###############################################################################

HOME_DIR=~

# Eclipse variables
#VMARGS=-Xmx256m
ECLIPSE_LOCATION=${HOME_DIR}/eclipse/eclipse
WORKSPACE=${HOME_DIR}/workspace_luna

MAVEN_ID=pom.xml
ECPLISE_ID=.project

SCRIPT_WORK_DIR=${HOME_DIR}/source_code/GitView/ant_build
PROJECT_REG_FILE=register
IMPORT_ISSUES=import_issues

# Metrics variables
BUILD_FILE=build.xml
TEMPLATE_BUILD_FILE_LOCATION=${HOME_DIR}/source_code/GitView/src/metrics_calc/${BUILD_FILE}
XML_NAME=metrics.xml

# XML to CSV converter variables
XML_CONVERTER_LOCATION=${HOME_DIR}/source_code/eclipse_metrics_xml_reader
XML_CONVERTER_PROGRAM=${XML_CONVERTER_LOCATION}/src/eclipse_metrics_xml_reader.py
OUTPUT_FORMAT=csv

# Initial directory
START_DIR=$PWD

# Root location of the project. Provided by user
#PROJECT_HOME_FOLDER=${HOME_DIR}/source_code/acra
#OUTPUT_FOLDER=${HOME_DIR}/source_code/GitView/acra_metrics
#VERSION_NUMBER=1

HEADLESS=false


if [ $# -eq 3 ]; then
    PROJECT_HOME_FOLDER=$1
    OUTPUT_FOLDER=$2
    VERSION_NUMBER=$3
elif [ $# -eq 4 ]; then
    PROJECT_HOME_FOLDER=$1
    OUTPUT_FOLDER=$2
    VERSION_NUMBER=$3
    HEADLESS=$4
else
    # Invalid args
    echo "Invalid Arguements got" $#", expecting 3 or 4"
    exit 1
fi

if [[ HEADLESS -eq true ]]; then
    HEADLESS=0
else
    HEADLESS=1
fi

function maven_setup {
    local project_dir=$1

    mvn -Declipse.workspace="${WORKSPACE}" eclipse:configure-workspace

    cd ${project_dir}

    mvn eclipse:eclipse

    cd ${START_DIR}
}

function import_project {
    
    # use xvfb-run to run on gui-less server
    if [[ HEADLESS -eq 0 ]]; then
        xvfb-run ${ECLIPSE_LOCATION} -console -noSplash -data ${WORKSPACE} -import ${PROJECT_HOME_FOLDER} -exit_on_finish
    else
        ${ECLIPSE_LOCATION} -console -noSplash -data ${WORKSPACE} -import ${PROJECT_HOME_FOLDER} -exit_on_finish
    fi
}

# Create the build file for the project
function create_build_file {
    # $1 => project location
    # $2 => project name
    local project_location=$1
    local project_name=`basename ${project_location}`

    # Replace project_name with the actual project name
    sed "s/<project_name>/${project_name}/" ${TEMPLATE_BUILD_FILE_LOCATION} > ${project_location}/${BUILD_FILE}
}

function calc_metrics {
    # $1 => location of the project
    local project_location=$1

    # use xvfb-run to run on gui-less server
    # Launch eclipse without a ui and run the metrics plug in on it.
    if [[ HEADLESS -eq 0 ]]; then
        xvfb-run ${ECLIPSE_LOCATION} -console -noSplash -noupdate -application org.eclipse.ant.core.antRunner -data ${WORKSPACE} -file ${project_location}/${BUILD_FILE}
    else
        ${ECLIPSE_LOCATION} -console -noSplash -noupdate -application org.eclipse.ant.core.antRunner -data ${WORKSPACE} -file ${project_location}/${BUILD_FILE}
    fi
}

function convert_xml_to_csv {
    # $1 => location of the project
    local project_location=$1

    # Convert the xml to csv
    python2 ${XML_CONVERTER_PROGRAM} -i ${project_location}/${XML_NAME} -t ${OUTPUT_FORMAT}
}

function import_and_calc_metrics {

    #$1 => project_version_number
    local project_version_number=$1

    readarray PROJECTS < <(find ${PROJECT_HOME_FOLDER} -name ${MAVEN_ID} -o -name ${ECPLISE_ID})

    if [[ ${#PROJECTS[@]} -eq 0 ]]; then
        echo "FAILED: No project found in" ${PROJECT_HOME_FOLDER}
    else
        for item in "${PROJECTS[@]}"
        do
            # Get the path from the absolute file path
            dir=${item%/*}

            if [[ ${item} == *${MAVEN_ID}* ]]; then
                #echo "Setting up the project using Maven"

                # Set up the eclipse env. using maven
                maven_setup ${dir}
            fi
        done

        rm ${SCRIPT_WORK_DIR}/${PROJECT_REG_FILE} -f

        # Ensure the register file is alreay created
        touch ${SCRIPT_WORK_DIR}/${PROJECT_REG_FILE}

        #echo "Importing all projects to Eclipse"
        import_project > ${SCRIPT_WORK_DIR}/${IMPORT_ISSUES}

        # Format next line to move to next page
        echo 

        for item in "${PROJECTS[@]}"
        do
            
            # Get the path from the absolute file path
            dir=${item%/*}
            project_name=`basename ${dir}`
            
            # Ensure the project successfully imported
            if grep -q "${project_name} SUCCESS" ${SCRIPT_WORK_DIR}/${IMPORT_ISSUES}; then

                # Check if the project has already had it's metrics calculated
                if grep -q ${dir} ${SCRIPT_WORK_DIR}/${PROJECT_REG_FILE}; then
                    # Project's metrics have been calculated.
                    echo "Project Found at "${dir}" Twice!"
                else
                    
                    # Project has not already had it's metrics calculated ensure it wont be calculated a second time
                    echo ${dir} | tee -a ${SCRIPT_WORK_DIR}/${PROJECT_REG_FILE}

                    create_build_file ${dir}

                    calc_metrics ${dir}

                    if [ $? -ne 0 ]; then
                        echo "FAILED: /${project_name}/ ${project_version_number} Metrics calculating "
                    fi
                    
                    convert_xml_to_csv ${dir}

                    if [ $? -ne 0 ]; then
                        echo "FAILED: /${project_name}/ ${project_version_number} XML parsing"
                    fi

                    # Move the generated files to the target output folder
                    success=0
                    for x in ${dir}/metrics*.csv
                    do
                        name=`basename "${x}"`
                        mv "${x}" ${OUTPUT_FOLDER}/${project_name}_${project_version_number}_${name}

                        success=`expr ${success} + 1`
                    done

                    if [[ $success -gt 0 ]]; then
                        echo "SUCCESS: /${project_name}/ ${project_version_number}"
                    fi
                fi
            else
                echo "FAILED: /${project_name}/ ${project_version_number} Could not import"
            fi
        done
    fi

    # Delete the temporary files
    rm ${SCRIPT_WORK_DIR}/${PROJECT_REG_FILE}
    rm ${SCRIPT_WORK_DIR}/${IMPORT_ISSUES}
}

function remove_untracked {

    #| grep \?\? 
    for item in `git status --porcelain | tr -d '??'`
    do
        # Delete uncommitted files or directories
        rm "${item}" -r
    done
}

function reset_repo {

    # Remove all tracked file changes
    git checkout -f
    remove_untracked
}

# Import all the project and calculate the metircs for the project
import_and_calc_metrics ${VERSION_NUMBER}

# Set the git repository to clean state.
reset_repo