INSERT INTO repositories (repo_name) VALUES ('tinfoil-sms');

INSERT INTO users (name, date) VALUES ('dataBaseError', NOW());

INSERT INTO commits (repo_reference, commiter_reference, author_reference, body) VALUES (1, 1, 1, 'MODIFIED: imports and comments', '4ab1ed55a933254f2841c83b7ec9545680ebe84e');

/*
 * Since there is no other commit leave empty
 */
INSERT INTO parent_commits (children_id, parent_id) VALUES ();


INSERT INTO file (commit_reference, name, addition, deletion, patch, file) VALUES (1, 'branches/tinfoil-sms/src/com/tinfoil/sms/settings/EditNumber.java', 6, 7, '@@ -44,12 +44,10 @@\n import com.tinfoil.sms.dataStructures.Number;\n import com.tinfoil.sms.dataStructures.TrustedContact;\n import com.tinfoil.sms.sms.ConversationView;\n-import com.tinfoil.sms.sms.MessageView;\n import com.tinfoil.sms.utility.MessageService;\n import com.tinfoil.sms.utility.SMSUtility;\n \n /**\n- * TODO implement on Dialog finish to check if the user exited the load (to then finish the task)\n  * ImportContact activity allows for contacts to be imported from the native\n  * database to the tinfoil-sms database. When a contact is imported, a contacts\'\n  * numbers, last message, date of last message, and type is stored. Once a', '/** \n * Copyright (C) 2011 Tinfoilhat\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see ">, #<Nokogiri::XML::Element:0x1369aec name="http:">, #<Nokogiri::XML::Text:0x136972c ".\n */\n\n\npackage com.tinfoil.sms.database;\n\nimport android.content.Context;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.util.Log;\n\n/**\n * SQLitehelper is used to create the database to store all needed\n * information for tinfoil-sms.\n */\npublic class SQLitehelper extends SQLiteOpenHelper {\n\t\n\tprivate static final String DATABASE_NAME = \"tinfoil-sms.db\";\n\t\n\t/*\n\t * Upgraded the version of the database since signature was removed from the\n\t * user database.\n\t */\n\tprivate static final int DATABASE_VERSION = 2;\n\t\n\t/* Table Names */\n\tpublic static final String USER_TABLE_NAME = \"user\";\n    public static final String TRUSTED_TABLE_NAME = \"trusted_contact\";\n    public static final String NUMBERS_TABLE_NAME = \"numbers\";\n    public static final String SHARED_INFO_TABLE_NAME = \"shared_information\";\n    public static final String BOOK_PATHS_TABLE_NAME = \"book_paths\";\n    public static final String MESSAGES_TABLE_NAME = \"messages\";\n    public static final String QUEUE_TABLE_NAME = \"queue\";\n    public static final String EXCHANGE_TABLE_NAME = \"exchange_messages\";\n    \n    /* Create statements */\n    private static final String SHARED_INFO_TABLE_CREATE =\n            \"CREATE TABLE \" + SHARED_INFO_TABLE_NAME + \n            \" (\"+ DBAccessor.KEY_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\" +\n            \" \" + DBAccessor.KEY_REFERENCE + \" INTEGER REFERENCES numbers (id)\" +\n            \" ON DELETE CASCADE ON UPDATE CASCADE, \" +\n            \" \" + DBAccessor.KEY_SHARED_INFO_1 + \" TEXT,\" + \n            \" \" + DBAccessor.KEY_SHARED_INFO_2 + \" TEXT);\";\n    \n    private static final String BOOK_PATHS_TABLE_CREATE =\n            \"CREATE TABLE \" + BOOK_PATHS_TABLE_NAME + \n            \" (\" + DBAccessor.KEY_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\" +\n            \" \" + DBAccessor.KEY_REFERENCE + \" INTEGER REFERENCES numbers (id)\" +\n            \" ON DELETE CASCADE ON UPDATE CASCADE, \" +\n            \" \" + DBAccessor.KEY_BOOK_PATH + \" TEXT,\" +\n            \" \" + DBAccessor.KEY_BOOK_INVERSE_PATH + \" TEXT);\";\n    \n    private static final String USER_TABLE_CREATE =\n            \"CREATE TABLE \" + USER_TABLE_NAME + \n            \" (\" + DBAccessor.KEY_PUBLIC_KEY + \" BLOB,\" +\n            \" \" + DBAccessor.KEY_PRIVATE_KEY + \" BLOB);\";\n    \n    private static final String TRUSTED_TABLE_CREATE =\n            \"CREATE TABLE \" + TRUSTED_TABLE_NAME + \n            \" (\" + DBAccessor.KEY_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\" +\n            \" \" + DBAccessor.KEY_NAME + \" TEXT );\";\n    \n    private static final String NUMBERS_TABLE_CREATE =\n            \"CREATE TABLE \" + NUMBERS_TABLE_NAME + \n            \" (\" + DBAccessor.KEY_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\" +\n            \" \" + DBAccessor.KEY_REFERENCE + \" INTEGER REFERENCES trusted_contact (id)\" +\n            \" ON DELETE CASCADE ON UPDATE CASCADE, \" +\n            \" \" + DBAccessor.KEY_NUMBER + \" TEXT,\" +\n            \" \" + DBAccessor.KEY_TYPE + \" INTEGER,\" +\n            \" \" + DBAccessor.KEY_UNREAD + \" INTEGER,\" +\n            \" \" + DBAccessor.KEY_PUBLIC_KEY + \" BLOB,\" +\n            \" \" + DBAccessor.KEY_SIGNATURE + \" BLOB,\" +\n            \" \" + DBAccessor.KEY_NONCE_ENCRYPT + \" BLOB,\" +\n            \" \" + DBAccessor.KEY_NONCE_DECRYPT + \" BLOB,\" +\n            \" \" + DBAccessor.KEY_INITIATOR + \" INTEGER,\" +\n            \" \" + DBAccessor.KEY_EXCHANGE_SETTING + \" INTEGER);\";\n    \n    private static final String MESSAGES_TABLE_CREATE =\n            \"CREATE TABLE \" + MESSAGES_TABLE_NAME + \n            \" (\" + DBAccessor.KEY_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\" +\n            \" \" + DBAccessor.KEY_REFERENCE + \" INTEGER REFERENCES numbers (id)\" +\n            \" ON DELETE CASCADE ON UPDATE CASCADE,\" +\n            \" \" + DBAccessor.KEY_MESSAGE + \" TEXT,\" +\n            \" \" + DBAccessor.KEY_DATE + \" INTEGER,\" +\n            \" \" + DBAccessor.KEY_SENT + \" INTEGER);\";\n    \n    private static final String QUEUE_TABLE_CREATE =\n            \"CREATE TABLE \" + QUEUE_TABLE_NAME + \n            \" (\" + DBAccessor.KEY_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\" +\n            \" \" + DBAccessor.KEY_NUMBER_REFERENCE + \" INTEGER REFERENCES numbers (id)\" +\n            \" ON DELETE CASCADE ON UPDATE CASCADE,\" +\n            \" \" + DBAccessor.KEY_MESSAGE + \" TEXT,\" +\n            \" \" + DBAccessor.KEY_EXCHANGE + \" INTEGER);\";\n    \n    private static final String EXCHANGE_TABLE_CREATE =\n    \t\t\"CREATE TABLE \" + EXCHANGE_TABLE_NAME + \n    \t\t\" (\" + DBAccessor.KEY_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\" +\n    \t\t\" \" + DBAccessor.KEY_NUMBER_REFERENCE + \" INTEGER REFERENCES numbers (id)\" +\n    \t\t\" ON DELETE CASCADE ON UPDATE CASCADE,\" +\n    \t\t\" \" + DBAccessor.KEY_EXCHANGE_MESSAGE + \" TEXT);\";\n\n    public SQLitehelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n    \tdb.execSQL(USER_TABLE_CREATE);\n        db.execSQL(TRUSTED_TABLE_CREATE);\n        db.execSQL(NUMBERS_TABLE_CREATE);\n        db.execSQL(SHARED_INFO_TABLE_CREATE);\n        db.execSQL(BOOK_PATHS_TABLE_CREATE);\n        db.execSQL(MESSAGES_TABLE_CREATE);\n        db.execSQL(QUEUE_TABLE_CREATE);\n        db.execSQL(EXCHANGE_TABLE_CREATE);\n    }\n\n\t@Override\n\tpublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\t\tLog.v(\"Database Update\", \"tables are being deleted to update from version \"\n\t\t\t\t+ oldVersion + \" to version \" + newVersion); \n\t\tdb.execSQL(\"DROP TABLE IF EXISTS \" + USER_TABLE_NAME);\n\t\tdb.execSQL(\"DROP TABLE IF EXISTS \" + TRUSTED_TABLE_NAME);\n\t\tdb.execSQL(\"DROP TABLE IF EXISTS \" + NUMBERS_TABLE_NAME);\n\t\tdb.execSQL(\"DROP TABLE IF EXISTS \" + SHARED_INFO_TABLE_NAME);\n\t\tdb.execSQL(\"DROP TABLE IF EXISTS \" + BOOK_PATHS_TABLE_NAME);\n\t\tdb.execSQL(\"DROP TABLE IF EXISTS \" + MESSAGES_TABLE_NAME);\n\t\tdb.execSQL(\"DROP TABLE IF EXISTS \" + QUEUE_TABLE_NAME);\n\t\tdb.execSQL(\"DROP TABLE IF EXISTS \" + EXCHANGE_TABLE_NAME);\n\t\tonCreate(db);\t\t\n\t}\n\t\n\t@Override\n\tpublic void onOpen(SQLiteDatabase db) {\n\t\tsuper.onOpen(db);\t\t\n\t\tif (!db.isReadOnly())\n\t\t{\n\t\t\tdb.execSQL(\"PRAGMA foreign_keys=ON;\");\n\t\t}\n\t}\n}');