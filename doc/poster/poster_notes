Poster Notes:

1. Motivation:
Source code documentation can provide a better understanding of the source code for users, developers and maintainers. Despite their importance, code comments are not always updated and may over time become inconsistent with the corresponding source code. This can lead to the developer/maintainer misunderstanding what the code does.

Furthermore, source code analysis such as code churn does not distinguish source code from documentation. This causes valuable information to be missed in the analysis. Such as, do comments stay up-to-date over the life of the software? Or how does comment churn compare to code churn over the life of the project? 

Work has been done on looking at the code churn of projects to determine the quality of the software produced. By dividing code churn into two separate categories, commenting churn and source code churn we Hypothesize that more useful information about the project will be identified

2. Background
Github is a very popular source code version management software that is used by some of the most popular open source projects. Github uses 'git' to provide the source code management and hosts the source code so that users and the public can access. 

3. Approach to Data Mining Github
Through the use of Github's git api source code version history was gathered and stored. Once stored it was parsed to identify comments and code for additions and deletions. 

3. Preliminary Results
<Graph of churn per month> 
<Graph of churn per day>

4. Conclusion and Future work
- Better visualizations
- Churn on a package/file(/class)/method level
    - method would require linking comments to code
- Churn at important parts of the project's life, releases, new features, bug fixes...

5. References